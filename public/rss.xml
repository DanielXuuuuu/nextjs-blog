<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Daniel Xu's Blog</title>
        <link>https://nextjs-blog-danielxuuuuu.vercel.app</link>
        <description>Welcome to my blog!</description>
        <lastBuildDate>Fri, 14 May 2021 13:01:06 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Next.js using Feed for Node.js</generator>
        <language>en</language>
        <image>
            <title>Daniel Xu's Blog</title>
            <url>https://nextjs-blog-danielxuuuuu.vercel.app/images/profile.jpeg</url>
            <link>https://nextjs-blog-danielxuuuuu.vercel.app</link>
        </image>
        <copyright>All rights reserved 2021, Daniel Xu</copyright>
        <item>
            <title><![CDATA[When to Use Static Generation v.s. Server-side Rendering]]></title>
            <link>https://nextjs-blog-danielxuuuuu.vercel.app/posts/ssg-ssr</link>
            <guid>https://nextjs-blog-danielxuuuuu.vercel.app/posts/ssg-ssr</guid>
            <pubDate>Thu, 02 Jan 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>We recommend using <strong>Static Generation</strong> (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.</p>
<p>You can use Static Generation for many types of pages, including:</p>
<ul>
<li>Marketing pages</li>
<li>Blog posts</li>
<li>E-commerce product listings</li>
<li>Help and documentation</li>
</ul>
<p>You should ask yourself: "Can I pre-render this page <strong>ahead</strong> of a user's request?" If the answer is yes, then you should choose Static Generation.</p>
<p>On the other hand, Static Generation is <strong>not</strong> a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.</p>
<p>In that case, you can use <strong>Server-Side Rendering</strong>. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.</p>
]]></content:encoded>
            <author>979223119@qq.com (Daniel Xu)</author>
        </item>
        <item>
            <title><![CDATA[Two Forms of Pre-rendering]]></title>
            <link>https://nextjs-blog-danielxuuuuu.vercel.app/posts/pre-rendering</link>
            <guid>https://nextjs-blog-danielxuuuuu.vercel.app/posts/pre-rendering</guid>
            <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Next.js has two forms of pre-rendering: <strong>Static Generation</strong> and <strong>Server-side Rendering</strong>. The difference is in <strong>when</strong> it generates the HTML for a page.</p>
<ul>
<li><strong>Static Generation</strong> is the pre-rendering method that generates the HTML at <strong>build time</strong>. The pre-rendered HTML is then <em>reused</em> on each request.</li>
<li><strong>Server-side Rendering</strong> is the pre-rendering method that generates the HTML on <strong>each request</strong>.</li>
</ul>
<p>Importantly, Next.js lets you <strong>choose</strong> which pre-rendering form to use for each page. You can create a "hybrid" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.</p>
]]></content:encoded>
            <author>979223119@qq.com (Daniel Xu)</author>
        </item>
    </channel>
</rss>